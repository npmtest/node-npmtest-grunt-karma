{"/home/travis/build/npmtest/node-npmtest-grunt-karma/test.js":"/* istanbul instrument in package npmtest_grunt_karma */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-karma/lib.npmtest_grunt_karma.js":"/* istanbul instrument in package npmtest_grunt_karma */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_grunt_karma = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_grunt_karma = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-karma/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-grunt-karma && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_grunt_karma */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_grunt_karma\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_grunt_karma.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_grunt_karma.rollup.js'] =\n            local.assetsDict['/assets.npmtest_grunt_karma.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_grunt_karma.__dirname + '/lib.npmtest_grunt_karma.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-karma/node_modules/grunt-karma/tasks/grunt-karma.js":"/*\n * grunt-karma\n * https://github.com/karma-runner/grunt-karma\n *\n * Copyright (c) 2013 Dave Geddes\n * Licensed under the MIT license.\n */\n\nvar runner = require('karma').runner\nvar Server = require('karma').Server\nvar path = require('path')\nvar _ = require('lodash')\n\nfunction finished (code) {\n  return this(code === 0)\n}\n\n// Parse out all cli arguments in the form of `--arg=something` or\n// `-c=otherthing` and return the array.\nfunction parseArgs (args) {\n  return _.filter(args, function (arg) {\n    return arg.match(/^--?/)\n  })\n}\n\nmodule.exports = function (grunt) {\n  grunt.registerMultiTask('karma', 'run karma.', function () {\n    var done = this.async()\n    var options = this.options({\n      background: false,\n      client: {}\n    })\n\n    // Allow for passing cli arguments to `client.args` using  `--grep=x`\n    var args = parseArgs(process.argv.slice(2))\n    if (options.client && _.isArray(options.client.args)) {\n      args = options.client.args.concat(args)\n    }\n\n    // If arguments are provided we pass them to karma\n    if (args.length > 0) {\n      if (!options.client) {\n        options.client = {}\n      }\n      options.client.args = args\n    }\n\n    // Only create client info if data is provided\n    if (options.client) {\n      // Merge karma default options\n      _.defaults(options.client, {\n        args: [],\n        useIframe: true,\n        captureConsole: true\n      })\n    }\n\n    var opts = _.cloneDeep(options)\n    // Merge options onto data, with data taking precedence.\n    var data = _.merge(opts, this.data)\n\n    // But override the browsers array.\n    if (data.browsers && this.data.browsers) {\n      data.browsers = this.data.browsers\n    }\n\n    // Merge client.args\n    if (this.data.client && _.isArray(this.data.client.args)) {\n      data.client.args = this.data.client.args.concat(options.client.args)\n    }\n\n    if (data.configFile) {\n      data.configFile = path.resolve(data.configFile)\n    }\n\n    if (data.files || options.files) {\n      data.files = [].concat.apply(options.files || [], this.files.map(function (file) {\n        return file.src.map(function (src) {\n          var obj = {\n            pattern: src\n          }\n          var opts = ['watched', 'served', 'included']\n          opts.forEach(function (opt) {\n            if (opt in file) {\n              obj[opt] = file[opt]\n            }\n          })\n          return obj\n        })\n      }))\n      data.files = _.flattenDeep(data.files)\n    }\n\n    // Allow the use of templates in preprocessors\n    if (_.isPlainObject(data.preprocessors)) {\n      var preprocessors = {}\n      Object.keys(data.preprocessors).forEach(function (key) {\n        var value = data.preprocessors[key]\n        if (options.basePath) {\n          key = options.basePath + key\n        }\n        key = path.resolve(key)\n        key = grunt.template.process(key)\n        preprocessors[key] = value\n      })\n      data.preprocessors = preprocessors\n    }\n\n    // support `karma run`, useful for grunt watch\n    if (this.flags.run) {\n      runner.run(data, finished.bind(done))\n      return\n    }\n\n    // allow karma to be run in the background so it doesn't block grunt\n    if (data.background) {\n      var backgroundProcess = require('child_process').fork(\n          path.join(__dirname, '..', 'lib', 'background.js')\n      )\n\n      backgroundProcess.on('close', function (code) {\n        var error = code\n        if (error) {\n          grunt.log.error('background karma process exited with error (code: ' + code + ')')\n        }\n      })\n\n      process.on('exit', function () {\n        backgroundProcess.kill()\n      })\n\n      backgroundProcess.send({ config: data })\n      done()\n    } else {\n      var server = new Server(data, finished.bind(done))\n      server.start()\n    }\n  })\n}\n","/home/travis/build/npmtest/node-npmtest-grunt-karma/node_modules/grunt-karma/gruntfile.js":"module.exports = function (grunt) {\n  var plugins = ['karma-mocha']\n  var browsers = []\n\n  if (process.env.TRAVIS) {\n    plugins.push('karma-firefox-launcher')\n    browsers.push('Firefox')\n  } else {\n    plugins.push('karma-chrome-launcher')\n    browsers.push('Chrome')\n  }\n\n  grunt.initConfig({\n    pkg: grunt.file.readJSON('package.json'),\n\n    pkgFile: 'package.json',\n\n    eslint: {\n      target: [\n        'gruntfile.js',\n        'lib/*.js',\n        'tasks/*.js',\n        'test/*.js'\n      ]\n    },\n\n    'npm-publish': {\n      options: {\n        abortIfDirty: true\n      }\n    },\n\n    'npm-contributors': {\n      options: {\n        commitMessage: 'chore: Update contributors'\n      }\n    },\n\n    conventionalChangelog: {\n      release: {\n        options: {\n          changelogOpts: {\n            preset: 'angular'\n          }\n        },\n        src: 'CHANGELOG.md'\n      }\n    },\n\n    conventionalGithubReleaser: {\n      release: {\n        options: {\n          auth: {\n            type: 'oauth',\n            token: process.env.GH_TOKEN\n          },\n          changelogOpts: {\n            preset: 'angular'\n          }\n        }\n      }\n    },\n\n    bump: {\n      options: {\n        updateConfigs: ['pkg'],\n        commitFiles: ['package.json', 'CHANGELOG.md'],\n        commitMessage: 'chore: release v%VERSION%',\n        pushTo: 'upstream',\n        gitDescribeOptions: '| echo \"beta-$(git rev-parse --short HEAD)\"'\n      }\n    },\n\n    karma: {\n      options: {\n        browsers: browsers,\n        frameworks: ['mocha'],\n        plugins: plugins\n      },\n      single: {\n        singleRun: true,\n        files: [\n          {\n            src: 'node_modules/expect.js/index.js'\n          }, {\n            src: 'test/**/*.js'\n          }\n        ]\n      },\n      background: {\n        background: true,\n        files: [\n          {\n            src: 'node_modules/expect.js/index.js'\n          }, {\n            src: 'test/**/*.js'\n          }\n        ]\n      },\n      config: {\n        configFile: 'karma.conf.js',\n        singleRun: true\n      },\n      merge: {\n        options: {\n          files: ['node_modules/expect.js/index.js']\n        },\n        singleRun: true,\n        files: [\n          {\n            src: 'test/**/*.js'\n          }\n        ]\n      },\n      dev: {\n        reporters: 'dots',\n        background: true\n      },\n      auto: {\n        autoWatch: true\n      }\n    },\n    watch: {\n      tests: {\n        files: 'test/**/*.js',\n        tasks: ['karma:dev:run']\n      },\n      bgtest: {\n        // This is just to stop node exiting\n        files: 'test/**/*.js',\n        tasks: []\n      }\n    }\n  })\n\n  grunt.loadTasks('tasks')\n  require('load-grunt-tasks')(grunt)\n\n  grunt.registerTask('test', ['karma:single', 'karma:config', 'karma:merge'])\n  grunt.registerTask('default', ['eslint', 'test'])\n  grunt.registerTask('bgtest', ['karma:background', 'watch:bgtest'])\n\n  grunt.registerTask('release', 'Bump the version and publish to npm.', function (type) {\n    grunt.task.run([\n      'npm-contributors',\n      'bump:' + (type || 'patch') + ':bump-only',\n      'conventionalChangelog',\n      'bump-commit',\n      'conventionalGithubReleaser',\n      'npm-publish'\n    ])\n  })\n}\n","/home/travis/build/npmtest/node-npmtest-grunt-karma/node_modules/grunt-karma/karma.conf.js":"// Karma configuration\n\nmodule.exports = function(config) {\n  config.set({\n\n    // list of files / patterns to load in the browser\n    files: [\n      'node_modules/expect.js/index.js',\n      'test/**/*.js'\n    ]\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-grunt-karma/node_modules/grunt-karma/lib/background.js":"var Server = require('karma').Server\n\nprocess.on('message', function (data) {\n  var server = new Server(data.config)\n  server.start()\n})\n"}